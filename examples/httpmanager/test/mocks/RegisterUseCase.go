// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	application "examples/httpmanager/internal/application"

	mock "github.com/stretchr/testify/mock"
)

// RegisterUseCase is an autogenerated mock type for the RegisterUseCase type
type RegisterUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, input
func (_m *RegisterUseCase) Execute(ctx context.Context, input application.RegisterInput) (application.RegisterOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 application.RegisterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, application.RegisterInput) (application.RegisterOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, application.RegisterInput) application.RegisterOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(application.RegisterOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, application.RegisterInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRegisterUseCase creates a new instance of RegisterUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegisterUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegisterUseCase {
	mock := &RegisterUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
